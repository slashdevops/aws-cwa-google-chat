---
name: "AWS SAM"

# https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_run
on:
  workflow_call:
    secrets:
      AWS_OIDC_ROLE_TO_ASSUME:
        required: true
      SAM_APP_BUCKET:
        required: true

  workflow_dispatch:

permissions:
  id-token: write
  actions: read

env:
  AWS_REGION: us-east-1
  GO_VERSION: 1.18

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        AWS_REGIONS:
          - us-east-1
          # - us-east-2
          # - us-west-1
          # - us-west-2
          # - eu-west-1
          # - eu-west-2
          # - eu-west-3
          # - eu-central-1
          # - eu-north-1
          # - ap-southeast-2
          # - ap-southeast-1
          # - ap-northeast-1
          # - ap-northeast-2
          # - ap-south-1
          # - ca-central-1
          # - sa-east-1

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go 1.x
        id: go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python 3.x
        uses: actions/setup-python@v2

      - name: Set up AWS SAM
        uses: aws-actions/setup-sam@v1

      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Show project files before make
        run: tree .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          role-session-name: publish-sam-app
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS SAM Validate template
        run: |
          aws cloudformation validate-template --template-body file://template.yaml  1>/dev/null
          sam validate
      - name: AWS SAM Build template
        run: |
          GIT_VERSION=${{ github.ref_name }} sam build --base-dir cmd/idpscim/
      - name: AWS SAM Package
        env:
          SAM_APP_BUCKET: ${{ secrets.SAM_APP_BUCKET }}
        run: |
          sam package --output-template-file packaged.yaml --s3-bucket $SAM_APP_BUCKET
      - name: Git Current branch name (Version)
        run: |
          echo ${{ github.ref_name }}
      - name: Set semVer format version
        id: semver
        run: |
          VERSION=$(echo ${{ github.ref_name }} | cut -d 'v' -f 2)
          echo "::set-output name=version::$VERSION"
      - name: semVer version
        run: |
          echo ${{ steps.semver.outputs.version }}
      # iterate over regions
      - name: AWS SAM Publish
        env:
          AWS_PUBLIC_REGION: ${{ matrix.AWS_REGIONS }}
          SAM_APP_VERSION: ${{ steps.semver.outputs.version }}
        run: |
          sam publish --semantic-version $SAM_APP_VERSION --template packaged.yaml --region $AWS_PUBLIC_REGION
      - name: Get the AWS SAM published application ARN
        id: set_arn
        env:
          AWS_PUBLIC_REGION: ${{ matrix.AWS_REGIONS }}
        run: |
          AWS_SAM_APP_ARN=$(\
            aws serverlessrepo list-applications --max-items 100 --region $AWS_PUBLIC_REGION \
              | jq -c '.Applications[] | select(.ApplicationId | contains("idp-scim-sync"))' \
              | jq -r '.ApplicationId' \
            )
          echo "::set-output name=arn::$AWS_SAM_APP_ARN"
      - name: Show AWS SAM Application ARN
        run: |
          echo ${{ steps.set_arn.outputs.arn }}
      - name: Get the AWS SAM published application ARN
        env:
          AWS_PUBLIC_REGION: ${{ matrix.AWS_REGIONS }}
          AWS_SAM_APP_ARN: ${{ steps.set_arn.outputs.arn }}
        run: |
          aws serverlessrepo put-application-policy --application-id $AWS_SAM_APP_ARN --statements Principals='*',Actions='Deploy' --region $AWS_PUBLIC_REGION
